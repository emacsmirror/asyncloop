#+TITLE: Chain

Ok, say you have a big slow function, and you decide to carve it up into
piecemeal functions each with imperceptible latency.  How will you run those
functions?  Through a dolist?  No, because dolists can't be paused, so that'd
be the same as the big slow function.  You need something smart... something
perhaps utilizing =run-with-idle-timer=...

This library uses builtin timers to help you run a series of functions -- we'll
call it a chain -- without blocking Emacs.  Same principle as deferred.el, but
simpler if you haven't learned jsdeferred or its other inspiration sources.

Features:

- it weeds out many edge cases for you -- rolling your own timer-based
  non-blocking mechanism is surprisingly complicated

- it gets out of the way when the user is operating Emacs & should be
  unnoticable

- it begins executing instantly, not, say, after a second of idle time,
  because a second can be all the time you get in the first place, e.g. the
  time between when user switches to minibuffer and when user begins to type.

The end user API consists mainly of =chain-define= and =chain-run=.
Sometimes, user may also find reason to call =chain-state= and =chain-echo=.
For example usage, see my other package that depends on it, [[https://github.com/meedstrom/deianira][Deianira]].
